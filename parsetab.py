
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = '\x1f\x8bE\x1a\xa1Z\x8fr\xb2\xf11{\xda\xcb;\xff'
    
_lr_action_items = {'LOAD':([0,1,4,17,27,37,41,44,51,59,79,87,88,89,90,95,99,100,],[1,1,-3,1,1,-8,-6,-5,1,-4,-7,1,-57,-61,-59,-56,-60,-58,]),'LPAREN':([60,62,63,64,65,66,67,],[71,72,73,74,75,76,77,]),'NOTEQUAL':([72,73,74,75,76,77,109,110,111,],[89,89,89,89,89,89,-62,89,-63,]),'MERGEMIN':([0,1,4,17,27,37,41,44,51,59,79,87,88,89,90,95,99,100,],[2,2,-3,2,2,-8,-6,-5,2,-4,-7,2,-57,-61,-59,-56,-60,-58,]),'ANTIMODE':([72,73,74,75,76,77,],[85,85,85,85,85,85,]),'SUM':([72,73,74,75,76,77,],[86,86,86,86,86,86,]),'NUMBER':([0,1,4,17,27,37,41,44,51,59,71,79,87,88,89,90,95,99,100,],[10,10,-3,10,10,-8,-6,-5,10,-4,81,-7,10,-57,-61,-59,-56,-60,-58,]),'LESSTHAN':([72,73,74,75,76,77,109,110,111,],[88,88,88,88,88,88,-62,88,-63,]),'PRINT':([0,4,17,37,41,44,59,79,],[3,-3,3,-8,-6,-5,-4,-7,]),'SUBTRACT':([6,11,23,],[-66,31,-66,]),'COLLAPSE':([72,73,74,75,76,77,],[98,98,98,98,98,98,]),'RPAREN':([8,10,21,22,23,24,32,33,34,36,40,45,46,47,48,50,52,53,54,55,56,57,58,61,68,70,80,81,82,83,84,85,86,91,92,93,94,96,97,98,101,102,103,104,105,106,107,108,112,113,114,115,116,117,118,119,],[-12,-10,-15,-13,-9,-66,-65,-32,-24,-32,-21,-23,-64,-25,-22,-26,-14,-17,-19,-16,-20,-18,-32,-31,-34,-30,108,-11,-45,-54,-42,-49,-44,-47,-52,-48,-51,-46,113,-50,-43,114,115,116,117,118,-33,-36,-55,-35,-37,-38,-41,-39,-40,-53,]),'SEMICOLON':([6,8,10,19,21,22,23,24,25,28,32,33,34,36,40,43,45,46,47,48,50,52,53,54,55,56,57,58,61,68,69,70,107,108,113,114,115,116,117,118,],[-9,-12,-10,37,-15,-13,-9,-66,41,44,-65,-32,-24,-32,-21,59,-23,-64,-25,-22,-26,-14,-17,-19,-16,-20,-18,-32,-31,-34,79,-30,-33,-36,-35,-37,-38,-41,-39,-40,]),'MERGEFLAT':([0,1,4,17,27,37,41,44,51,59,79,87,88,89,90,95,99,100,],[16,16,-3,16,16,-8,-6,-5,16,-4,-7,16,-57,-61,-59,-56,-60,-58,]),'LESSTHANEQUAL':([72,73,74,75,76,77,109,110,111,],[90,90,90,90,90,90,-62,90,-63,]),'MEDIAN':([72,73,74,75,76,77,],[91,91,91,91,91,91,]),'BED12':([39,42,],[54,54,]),'CAST':([0,1,4,17,27,37,41,44,51,59,79,87,88,89,90,95,99,100,],[5,5,-3,5,5,-8,-6,-5,5,-4,-7,5,-57,-61,-59,-56,-60,-58,]),'COMMA':([6,11,23,24,32,68,108,113,114,115,116,117,118,],[-66,30,-66,-66,30,78,-36,-35,-37,-38,-41,-39,-40,]),'GENOME':([39,42,],[56,56,]),'STDEV':([72,73,74,75,76,77,],[94,94,94,94,94,94,]),'EQUALEQUAL':([72,73,74,75,76,77,109,110,111,],[95,95,95,95,95,95,-62,95,-63,]),'IDENTIFIER':([0,1,2,3,4,5,7,12,13,15,16,17,18,20,27,29,30,31,37,41,44,51,59,79,87,88,89,90,95,99,100,],[6,23,-27,24,-3,24,24,24,24,-29,-28,6,24,24,23,24,24,24,-8,-6,-5,23,-4,-7,23,-57,-61,-59,-56,-60,-58,]),'CHROM':([49,78,],[63,63,]),'$end':([0,4,14,17,35,37,41,44,59,79,],[-2,-3,0,-2,-1,-8,-6,-5,-4,-7,]),'COUNT':([0,4,17,37,41,44,59,72,73,74,75,76,77,79,],[7,-3,7,-8,-6,-5,-4,82,82,82,82,82,82,-7,]),'END':([49,78,],[66,66,]),'STRING':([0,1,4,17,27,37,41,44,51,59,79,87,88,89,90,95,99,100,],[8,8,-3,8,8,-8,-6,-5,8,-4,-7,8,-57,-61,-59,-56,-60,-58,]),'MODE':([72,73,74,75,76,77,],[93,93,93,93,93,93,]),'EQUAL':([6,],[27,]),'BED3':([39,42,],[53,53,]),'START':([49,78,],[64,64,]),'AS':([8,10,21,22,23,24,26,32,33,34,36,38,40,45,46,47,48,50,52,53,54,55,56,57,58,61,68,70,107,108,113,114,115,116,117,118,],[-12,-10,39,-13,-9,-66,42,-65,-32,-24,-32,51,-21,-23,-64,-25,-22,-26,-14,-17,-19,-16,-20,-18,-32,-31,-34,-30,-33,-36,-35,-37,-38,-41,-39,-40,]),'SCORE':([49,78,],[65,65,]),'GREATERTHAN':([72,73,74,75,76,77,109,110,111,],[100,100,100,100,100,100,-62,100,-63,]),'FOREACH':([0,1,4,17,27,37,41,44,51,59,79,87,88,89,90,95,99,100,],[12,12,-3,12,12,-8,-6,-5,12,-4,-7,12,-57,-61,-59,-56,-60,-58,]),'INTERSECT':([0,1,4,6,9,11,17,23,24,27,32,37,41,44,46,51,59,79,87,88,89,90,95,99,100,],[13,13,-3,-66,29,-65,13,-66,-66,13,-65,-8,-6,-5,-64,13,-4,-7,13,-57,-61,-59,-56,-60,-58,]),'GREATERTHANEQUAL':([72,73,74,75,76,77,109,110,111,],[99,99,99,99,99,99,-62,99,-63,]),'WHERE':([24,32,33,36,46,53,54,55,56,57,58,],[-66,-65,49,49,-64,-17,-19,-16,-20,-18,49,]),'STRAND':([49,78,],[67,67,]),'AND':([8,10,21,22,23,24,32,33,34,36,40,45,46,47,48,50,52,53,54,55,56,57,58,61,68,70,83,107,108,112,113,114,115,116,117,118,],[-12,-10,-15,-13,-9,-66,-65,-32,-24,-32,-21,-23,-64,-25,-22,-26,-14,-17,-19,-16,-20,-18,-32,-31,-34,-30,109,-33,-36,-55,-35,-37,-38,-41,-39,-40,]),'DISTANCE':([49,78,],[60,60,]),'NAME':([49,78,],[62,62,]),'MERGEMAX':([0,1,4,17,27,37,41,44,51,59,79,87,88,89,90,95,99,100,],[15,15,-3,15,15,-8,-6,-5,15,-4,-7,15,-57,-61,-59,-56,-60,-58,]),'MIN':([72,73,74,75,76,77,],[84,84,84,84,84,84,]),'MAX':([72,73,74,75,76,77,],[101,101,101,101,101,101,]),'MEAN':([72,73,74,75,76,77,],[96,96,96,96,96,96,]),'SAVE':([0,4,17,37,41,44,59,79,],[20,-3,20,-8,-6,-5,-4,-7,]),'OR':([8,10,21,22,23,24,32,33,34,36,40,45,46,47,48,50,52,53,54,55,56,57,58,61,68,70,83,107,108,112,113,114,115,116,117,118,],[-12,-10,-15,-13,-9,-66,-65,-32,-24,-32,-21,-23,-64,-25,-22,-26,-14,-17,-19,-16,-20,-18,-32,-31,-34,-30,111,-33,-36,-55,-35,-37,-38,-41,-39,-40,]),'BED6':([39,42,],[57,57,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'function':([72,73,74,75,76,77,],[97,102,103,104,105,106,]),'boolexp':([72,73,74,75,76,77,110,],[83,83,83,83,83,83,83,]),'ident':([0,1,3,5,7,12,13,17,18,20,27,29,30,31,51,87,],[11,11,25,26,28,32,32,11,32,38,11,32,32,32,11,11,]),'number':([71,],[80,]),'file':([1,51,],[21,69,]),'idents':([0,1,12,13,17,18,27,29,30,31,51,87,],[9,9,33,34,9,36,9,45,46,47,9,9,]),'sstmt':([0,17,],[4,4,]),'filetype':([39,42,],[52,58,]),'optfiletype':([21,],[40,]),'mods':([49,78,],[61,107,]),'element':([0,17,],[17,17,]),'merge':([0,1,17,27,51,87,],[18,18,18,18,18,18,]),'gql':([0,17,],[14,35,]),'boolexps':([72,73,74,75,76,77,110,],[92,92,92,92,92,92,119,]),'exp':([0,1,17,27,51,87,],[19,22,19,43,22,112,]),'compare':([72,73,74,75,76,77,110,],[87,87,87,87,87,87,87,]),'conj':([83,],[110,]),'mod':([49,78,],[68,68,]),'filetypes':([39,42,],[55,55,]),'optmods':([33,36,58,],[48,50,70,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> gql","S'",1,None,None,None),
  ('gql -> element gql','gql',2,'p_gql','/Users/rl6sf/src/gql/gqlgrammar.py',14),
  ('gql -> <empty>','gql',0,'p_gql_empty','/Users/rl6sf/src/gql/gqlgrammar.py',18),
  ('element -> sstmt','element',1,'p_element_stmt','/Users/rl6sf/src/gql/gqlgrammar.py',22),
  ('sstmt -> IDENTIFIER EQUAL exp SEMICOLON','sstmt',4,'p_sstmt_assignment','/Users/rl6sf/src/gql/gqlgrammar.py',35),
  ('sstmt -> COUNT ident SEMICOLON','sstmt',3,'p_sstmt_count','/Users/rl6sf/src/gql/gqlgrammar.py',39),
  ('sstmt -> PRINT ident SEMICOLON','sstmt',3,'p_sstmt_print','/Users/rl6sf/src/gql/gqlgrammar.py',43),
  ('sstmt -> SAVE ident AS file SEMICOLON','sstmt',5,'p_sstmt_save','/Users/rl6sf/src/gql/gqlgrammar.py',47),
  ('sstmt -> exp SEMICOLON','sstmt',2,'p_sstmt_exp','/Users/rl6sf/src/gql/gqlgrammar.py',51),
  ('exp -> IDENTIFIER','exp',1,'p_exp_identifier','/Users/rl6sf/src/gql/gqlgrammar.py',55),
  ('exp -> NUMBER','exp',1,'p_exp_number','/Users/rl6sf/src/gql/gqlgrammar.py',59),
  ('number -> NUMBER','number',1,'p_number_number','/Users/rl6sf/src/gql/gqlgrammar.py',63),
  ('exp -> STRING','exp',1,'p_exp_string','/Users/rl6sf/src/gql/gqlgrammar.py',67),
  ('file -> exp','file',1,'p_file','/Users/rl6sf/src/gql/gqlgrammar.py',71),
  ('optfiletype -> AS filetype','optfiletype',2,'p_optfiletype','/Users/rl6sf/src/gql/gqlgrammar.py',75),
  ('optfiletype -> <empty>','optfiletype',0,'p_optfiletype_empty','/Users/rl6sf/src/gql/gqlgrammar.py',79),
  ('filetype -> filetypes','filetype',1,'p_filetype','/Users/rl6sf/src/gql/gqlgrammar.py',83),
  ('filetypes -> BED3','filetypes',1,'p_filetypes','/Users/rl6sf/src/gql/gqlgrammar.py',87),
  ('filetypes -> BED6','filetypes',1,'p_filetypes','/Users/rl6sf/src/gql/gqlgrammar.py',88),
  ('filetypes -> BED12','filetypes',1,'p_filetypes','/Users/rl6sf/src/gql/gqlgrammar.py',89),
  ('filetypes -> GENOME','filetypes',1,'p_filetypes','/Users/rl6sf/src/gql/gqlgrammar.py',90),
  ('exp -> LOAD file optfiletype','exp',3,'p_exp_load','/Users/rl6sf/src/gql/gqlgrammar.py',94),
  ('exp -> FOREACH idents optmods','exp',3,'p_exp_foreach','/Users/rl6sf/src/gql/gqlgrammar.py',102),
  ('exp -> idents INTERSECT idents','exp',3,'p_exp_binary_intersect','/Users/rl6sf/src/gql/gqlgrammar.py',106),
  ('exp -> INTERSECT idents','exp',2,'p_exp_unary_intersect','/Users/rl6sf/src/gql/gqlgrammar.py',110),
  ('exp -> ident SUBTRACT idents','exp',3,'p_exp_subtract','/Users/rl6sf/src/gql/gqlgrammar.py',114),
  ('exp -> merge idents optmods','exp',3,'p_exp_merges','/Users/rl6sf/src/gql/gqlgrammar.py',118),
  ('merge -> MERGEMIN','merge',1,'p_exp_merge','/Users/rl6sf/src/gql/gqlgrammar.py',122),
  ('merge -> MERGEFLAT','merge',1,'p_exp_merge','/Users/rl6sf/src/gql/gqlgrammar.py',123),
  ('merge -> MERGEMAX','merge',1,'p_exp_merge','/Users/rl6sf/src/gql/gqlgrammar.py',124),
  ('exp -> CAST ident AS filetype optmods','exp',5,'p_exp_CAST','/Users/rl6sf/src/gql/gqlgrammar.py',128),
  ('optmods -> WHERE mods','optmods',2,'p_exp_optmods','/Users/rl6sf/src/gql/gqlgrammar.py',132),
  ('optmods -> <empty>','optmods',0,'p_exp_optmods_empty','/Users/rl6sf/src/gql/gqlgrammar.py',136),
  ('mods -> mod COMMA mods','mods',3,'p_exp_mods','/Users/rl6sf/src/gql/gqlgrammar.py',140),
  ('mods -> mod','mods',1,'p_exp_mods_one','/Users/rl6sf/src/gql/gqlgrammar.py',144),
  ('mod -> NAME LPAREN function RPAREN','mod',4,'p_exp_mod','/Users/rl6sf/src/gql/gqlgrammar.py',148),
  ('mod -> DISTANCE LPAREN number RPAREN','mod',4,'p_exp_mod','/Users/rl6sf/src/gql/gqlgrammar.py',149),
  ('mod -> CHROM LPAREN function RPAREN','mod',4,'p_exp_mod','/Users/rl6sf/src/gql/gqlgrammar.py',150),
  ('mod -> START LPAREN function RPAREN','mod',4,'p_exp_mod','/Users/rl6sf/src/gql/gqlgrammar.py',151),
  ('mod -> END LPAREN function RPAREN','mod',4,'p_exp_mod','/Users/rl6sf/src/gql/gqlgrammar.py',152),
  ('mod -> STRAND LPAREN function RPAREN','mod',4,'p_exp_mod','/Users/rl6sf/src/gql/gqlgrammar.py',153),
  ('mod -> SCORE LPAREN function RPAREN','mod',4,'p_exp_mod','/Users/rl6sf/src/gql/gqlgrammar.py',154),
  ('function -> MIN','function',1,'p_function','/Users/rl6sf/src/gql/gqlgrammar.py',158),
  ('function -> MAX','function',1,'p_function','/Users/rl6sf/src/gql/gqlgrammar.py',159),
  ('function -> SUM','function',1,'p_function','/Users/rl6sf/src/gql/gqlgrammar.py',160),
  ('function -> COUNT','function',1,'p_function','/Users/rl6sf/src/gql/gqlgrammar.py',161),
  ('function -> MEAN','function',1,'p_function','/Users/rl6sf/src/gql/gqlgrammar.py',162),
  ('function -> MEDIAN','function',1,'p_function','/Users/rl6sf/src/gql/gqlgrammar.py',163),
  ('function -> MODE','function',1,'p_function','/Users/rl6sf/src/gql/gqlgrammar.py',164),
  ('function -> ANTIMODE','function',1,'p_function','/Users/rl6sf/src/gql/gqlgrammar.py',165),
  ('function -> COLLAPSE','function',1,'p_function','/Users/rl6sf/src/gql/gqlgrammar.py',166),
  ('function -> STDEV','function',1,'p_function','/Users/rl6sf/src/gql/gqlgrammar.py',167),
  ('function -> boolexps','function',1,'p_function_bool','/Users/rl6sf/src/gql/gqlgrammar.py',171),
  ('boolexps -> boolexp conj boolexps','boolexps',3,'p_boolexps','/Users/rl6sf/src/gql/gqlgrammar.py',175),
  ('boolexps -> boolexp','boolexps',1,'p_boolexps_one','/Users/rl6sf/src/gql/gqlgrammar.py',179),
  ('boolexp -> compare exp','boolexp',2,'p_boolexp','/Users/rl6sf/src/gql/gqlgrammar.py',183),
  ('compare -> EQUALEQUAL','compare',1,'p_bool_compare','/Users/rl6sf/src/gql/gqlgrammar.py',187),
  ('compare -> LESSTHAN','compare',1,'p_bool_compare','/Users/rl6sf/src/gql/gqlgrammar.py',188),
  ('compare -> GREATERTHAN','compare',1,'p_bool_compare','/Users/rl6sf/src/gql/gqlgrammar.py',189),
  ('compare -> LESSTHANEQUAL','compare',1,'p_bool_compare','/Users/rl6sf/src/gql/gqlgrammar.py',190),
  ('compare -> GREATERTHANEQUAL','compare',1,'p_bool_compare','/Users/rl6sf/src/gql/gqlgrammar.py',191),
  ('compare -> NOTEQUAL','compare',1,'p_bool_compare','/Users/rl6sf/src/gql/gqlgrammar.py',192),
  ('conj -> AND','conj',1,'p_bool_conj','/Users/rl6sf/src/gql/gqlgrammar.py',196),
  ('conj -> OR','conj',1,'p_bool_conj','/Users/rl6sf/src/gql/gqlgrammar.py',197),
  ('idents -> ident COMMA idents','idents',3,'p_idents','/Users/rl6sf/src/gql/gqlgrammar.py',201),
  ('idents -> ident','idents',1,'p_idents_one','/Users/rl6sf/src/gql/gqlgrammar.py',205),
  ('ident -> IDENTIFIER','ident',1,'p_idnent_identifier','/Users/rl6sf/src/gql/gqlgrammar.py',209),
]
