
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = '\xfa\xdb\x08\xf7\xe1\x0f/\x95\x15\x0b\x02r,q\xaf\x03'
    
_lr_action_items = {'COUNT':([12,21,31,77,78,79,80,81,82,90,91,92,93,98,102,103,],[16,16,16,85,85,85,85,85,85,16,-58,-62,-60,-57,-61,-59,]),'LPAREN':([66,68,69,70,71,72,73,],[76,77,78,79,80,81,82,]),'NOTEQUAL':([77,78,79,80,81,82,112,113,114,],[92,92,92,92,92,92,-63,92,-64,]),'MERGEMIN':([12,21,31,90,91,92,93,98,102,103,],[17,17,17,17,-58,-62,-60,-57,-61,-59,]),'MEDIAN':([77,78,79,80,81,82,],[94,94,94,94,94,94,]),'SUM':([77,78,79,80,81,82,],[89,89,89,89,89,89,]),'EQUAL':([6,],[12,]),'LESSTHAN':([77,78,79,80,81,82,112,113,114,],[91,91,91,91,91,91,-63,91,-64,]),'PEAK':([0,2,3,15,32,45,57,],[4,-3,4,-5,-6,-4,-7,]),'PRINT':([0,2,3,15,32,45,57,],[5,-3,5,-5,-6,-4,-7,]),'SUBTRACT':([20,26,],[-67,42,]),'COLLAPSE':([77,78,79,80,81,82,],[101,101,101,101,101,101,]),'RPAREN':([9,20,22,24,33,35,36,39,40,43,44,49,50,51,52,53,54,56,58,59,60,61,62,63,64,65,67,74,75,84,85,86,87,88,89,94,95,96,97,99,100,101,104,105,106,107,108,109,110,111,115,116,117,118,119,120,121,122,],[-67,-8,-10,-9,-25,-13,-11,-66,-24,-33,-33,-20,-23,-22,-65,-26,-21,-27,-33,-15,-17,-16,-14,-19,-18,-12,-32,-35,-31,111,-46,-55,-43,-50,-45,-48,-53,-49,-52,-47,116,-51,-44,117,118,119,120,121,-34,-37,-56,-36,-38,-39,-42,-40,-41,-54,]),'SEMICOLON':([9,11,14,20,22,24,30,33,35,36,39,40,43,44,46,49,50,51,52,53,54,56,58,59,60,61,62,63,64,65,67,74,75,110,111,116,117,118,119,120,121,],[-67,15,32,-8,-10,-9,45,-25,-13,-11,-66,-24,-33,-33,57,-20,-23,-22,-65,-26,-21,-27,-33,-15,-17,-16,-14,-19,-18,-12,-32,-35,-31,-34,-37,-36,-38,-39,-42,-40,-41,]),'JACCARD':([9,20,23,26,39,52,],[-67,-67,37,-66,-66,-65,]),'MERGEFLAT':([12,21,31,90,91,92,93,98,102,103,],[18,18,18,18,-58,-62,-60,-57,-61,-59,]),'LESSTHANEQUAL':([77,78,79,80,81,82,112,113,114,],[93,93,93,93,93,93,-63,93,-64,]),'GENOME':([47,48,],[63,63,]),'CAST':([12,21,31,90,91,92,93,98,102,103,],[19,19,19,19,-58,-62,-60,-57,-61,-59,]),'COMMA':([9,20,26,39,74,111,116,117,118,119,120,121,],[-67,-67,41,41,83,-37,-36,-38,-39,-42,-40,-41,]),'BED12':([47,48,],[64,64,]),'STDEV':([77,78,79,80,81,82,],[97,97,97,97,97,97,]),'EQUALEQUAL':([77,78,79,80,81,82,112,113,114,],[98,98,98,98,98,98,-63,98,-64,]),'IDENTIFIER':([0,2,3,4,5,7,12,15,16,17,18,19,21,25,27,28,29,31,32,37,38,41,42,45,57,90,91,92,93,98,102,103,],[6,-3,6,9,9,9,20,-5,9,-28,-29,9,20,9,-30,9,9,20,-6,9,9,9,9,-4,-7,20,-58,-62,-60,-57,-61,-59,]),'CHROM':([55,83,],[69,69,]),'$end':([0,1,2,3,8,15,32,45,57,],[-2,0,-3,-2,-1,-5,-6,-4,-7,]),'LOAD':([12,21,31,90,91,92,93,98,102,103,],[21,21,21,21,-58,-62,-60,-57,-61,-59,]),'END':([55,83,],[72,72,]),'STRING':([12,21,31,90,91,92,93,98,102,103,],[22,22,22,22,-58,-62,-60,-57,-61,-59,]),'ANTIMODE':([77,78,79,80,81,82,],[88,88,88,88,88,88,]),'MODE':([77,78,79,80,81,82,],[96,96,96,96,96,96,]),'NUMBER':([9,10,12,21,31,76,90,91,92,93,98,102,103,],[-67,14,24,24,24,84,24,-58,-62,-60,-57,-61,-59,]),'BED3':([47,48,],[59,59,]),'START':([55,83,],[70,70,]),'AS':([9,13,20,22,24,33,34,35,36,39,40,43,44,49,50,51,52,53,54,56,58,59,60,61,62,63,64,65,67,74,75,110,111,116,117,118,119,120,121,],[-67,31,-8,-10,-9,-25,47,48,-11,-66,-24,-33,-33,-20,-23,-22,-65,-26,-21,-27,-33,-15,-17,-16,-14,-19,-18,-12,-32,-35,-31,-34,-37,-36,-38,-39,-42,-40,-41,]),'SCORE':([55,83,],[71,71,]),'GREATERTHAN':([77,78,79,80,81,82,112,113,114,],[103,103,103,103,103,103,-63,103,-64,]),'BED6':([47,48,],[60,60,]),'INTERSECT':([9,12,20,21,23,26,31,39,52,90,91,92,93,98,102,103,],[-67,25,-67,25,38,-66,25,-66,-65,25,-58,-62,-60,-57,-61,-59,]),'BED4':([47,48,],[61,61,]),'GREATERTHANEQUAL':([77,78,79,80,81,82,112,113,114,],[102,102,102,102,102,102,-63,102,-64,]),'WHERE':([9,39,43,44,52,58,59,60,61,62,63,64,],[-67,-66,55,55,-65,55,-15,-17,-16,-14,-19,-18,]),'STRAND':([55,83,],[73,73,]),'AND':([9,20,22,24,33,35,36,39,40,43,44,49,50,51,52,53,54,56,58,59,60,61,62,63,64,65,67,74,75,86,110,111,115,116,117,118,119,120,121,],[-67,-8,-10,-9,-25,-13,-11,-66,-24,-33,-33,-20,-23,-22,-65,-26,-21,-27,-33,-15,-17,-16,-14,-19,-18,-12,-32,-35,-31,112,-34,-37,-56,-36,-38,-39,-42,-40,-41,]),'DISTANCE':([55,83,],[66,66,]),'NAME':([55,83,],[68,68,]),'MERGEMAX':([12,21,31,90,91,92,93,98,102,103,],[27,27,27,27,-58,-62,-60,-57,-61,-59,]),'MIN':([77,78,79,80,81,82,],[87,87,87,87,87,87,]),'MAX':([77,78,79,80,81,82,],[104,104,104,104,104,104,]),'FILTER':([12,21,31,90,91,92,93,98,102,103,],[28,28,28,28,-58,-62,-60,-57,-61,-59,]),'MEAN':([77,78,79,80,81,82,],[99,99,99,99,99,99,]),'SAVE':([0,2,3,15,32,45,57,],[7,-3,7,-5,-6,-4,-7,]),'OR':([9,20,22,24,33,35,36,39,40,43,44,49,50,51,52,53,54,56,58,59,60,61,62,63,64,65,67,74,75,86,110,111,115,116,117,118,119,120,121,],[-67,-8,-10,-9,-25,-13,-11,-66,-24,-33,-33,-20,-23,-22,-65,-26,-21,-27,-33,-15,-17,-16,-14,-19,-18,-12,-32,-35,-31,114,-34,-37,-56,-36,-38,-39,-42,-40,-41,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'function':([77,78,79,80,81,82,],[100,105,106,107,108,109,]),'boolexp':([77,78,79,80,81,82,113,],[86,86,86,86,86,86,86,]),'ident':([4,5,7,12,16,19,21,25,28,29,31,37,38,41,42,90,],[10,11,13,26,33,34,26,39,39,39,26,39,39,39,39,26,]),'file':([21,31,],[35,46,]),'idents':([12,21,25,28,29,31,37,38,41,42,90,],[23,23,40,43,44,23,50,51,52,53,23,]),'sstmt':([0,3,],[2,2,]),'filetype':([47,48,],[58,65,]),'optfiletype':([35,],[49,]),'mods':([55,83,],[67,110,]),'element':([0,3,],[3,3,]),'merge':([12,21,31,90,],[29,29,29,29,]),'gql':([0,3,],[1,8,]),'boolexps':([77,78,79,80,81,82,113,],[95,95,95,95,95,95,122,]),'exp':([12,21,31,90,],[30,36,36,115,]),'compare':([77,78,79,80,81,82,113,],[90,90,90,90,90,90,90,]),'conj':([86,],[113,]),'mod':([55,83,],[74,74,]),'filetypes':([47,48,],[62,62,]),'optmods':([43,44,58,],[54,56,75,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> gql","S'",1,None,None,None),
  ('gql -> element gql','gql',2,'p_gql','/Users/rl6sf/src/gql/gqlgrammar.py',14),
  ('gql -> <empty>','gql',0,'p_gql_empty','/Users/rl6sf/src/gql/gqlgrammar.py',18),
  ('element -> sstmt','element',1,'p_element_stmt','/Users/rl6sf/src/gql/gqlgrammar.py',22),
  ('sstmt -> IDENTIFIER EQUAL exp SEMICOLON','sstmt',4,'p_sstmt_assignment','/Users/rl6sf/src/gql/gqlgrammar.py',35),
  ('sstmt -> PRINT ident SEMICOLON','sstmt',3,'p_sstmt_print','/Users/rl6sf/src/gql/gqlgrammar.py',40),
  ('sstmt -> PEAK ident NUMBER SEMICOLON','sstmt',4,'p_sstmt_peak','/Users/rl6sf/src/gql/gqlgrammar.py',44),
  ('sstmt -> SAVE ident AS file SEMICOLON','sstmt',5,'p_sstmt_save','/Users/rl6sf/src/gql/gqlgrammar.py',48),
  ('exp -> IDENTIFIER','exp',1,'p_exp_identifier','/Users/rl6sf/src/gql/gqlgrammar.py',56),
  ('exp -> NUMBER','exp',1,'p_exp_number','/Users/rl6sf/src/gql/gqlgrammar.py',60),
  ('exp -> STRING','exp',1,'p_exp_string','/Users/rl6sf/src/gql/gqlgrammar.py',64),
  ('file -> exp','file',1,'p_file','/Users/rl6sf/src/gql/gqlgrammar.py',68),
  ('optfiletype -> AS filetype','optfiletype',2,'p_optfiletype','/Users/rl6sf/src/gql/gqlgrammar.py',72),
  ('optfiletype -> <empty>','optfiletype',0,'p_optfiletype_empty','/Users/rl6sf/src/gql/gqlgrammar.py',76),
  ('filetype -> filetypes','filetype',1,'p_filetype','/Users/rl6sf/src/gql/gqlgrammar.py',80),
  ('filetypes -> BED3','filetypes',1,'p_filetypes','/Users/rl6sf/src/gql/gqlgrammar.py',84),
  ('filetypes -> BED4','filetypes',1,'p_filetypes','/Users/rl6sf/src/gql/gqlgrammar.py',85),
  ('filetypes -> BED6','filetypes',1,'p_filetypes','/Users/rl6sf/src/gql/gqlgrammar.py',86),
  ('filetypes -> BED12','filetypes',1,'p_filetypes','/Users/rl6sf/src/gql/gqlgrammar.py',87),
  ('filetypes -> GENOME','filetypes',1,'p_filetypes','/Users/rl6sf/src/gql/gqlgrammar.py',88),
  ('exp -> LOAD file optfiletype','exp',3,'p_exp_load','/Users/rl6sf/src/gql/gqlgrammar.py',92),
  ('exp -> FILTER idents optmods','exp',3,'p_exp_foreach','/Users/rl6sf/src/gql/gqlgrammar.py',97),
  ('exp -> idents INTERSECT idents','exp',3,'p_exp_binary_intersect','/Users/rl6sf/src/gql/gqlgrammar.py',101),
  ('exp -> idents JACCARD idents','exp',3,'p_exp_binary_jaccard','/Users/rl6sf/src/gql/gqlgrammar.py',105),
  ('exp -> INTERSECT idents','exp',2,'p_exp_unary_intersect','/Users/rl6sf/src/gql/gqlgrammar.py',109),
  ('exp -> COUNT ident','exp',2,'p_exp_count','/Users/rl6sf/src/gql/gqlgrammar.py',113),
  ('exp -> ident SUBTRACT idents','exp',3,'p_exp_subtract','/Users/rl6sf/src/gql/gqlgrammar.py',117),
  ('exp -> merge idents optmods','exp',3,'p_exp_merges','/Users/rl6sf/src/gql/gqlgrammar.py',121),
  ('merge -> MERGEMIN','merge',1,'p_exp_merge','/Users/rl6sf/src/gql/gqlgrammar.py',125),
  ('merge -> MERGEFLAT','merge',1,'p_exp_merge','/Users/rl6sf/src/gql/gqlgrammar.py',126),
  ('merge -> MERGEMAX','merge',1,'p_exp_merge','/Users/rl6sf/src/gql/gqlgrammar.py',127),
  ('exp -> CAST ident AS filetype optmods','exp',5,'p_exp_CAST','/Users/rl6sf/src/gql/gqlgrammar.py',131),
  ('optmods -> WHERE mods','optmods',2,'p_exp_optmods','/Users/rl6sf/src/gql/gqlgrammar.py',135),
  ('optmods -> <empty>','optmods',0,'p_exp_optmods_empty','/Users/rl6sf/src/gql/gqlgrammar.py',139),
  ('mods -> mod COMMA mods','mods',3,'p_exp_mods','/Users/rl6sf/src/gql/gqlgrammar.py',143),
  ('mods -> mod','mods',1,'p_exp_mods_one','/Users/rl6sf/src/gql/gqlgrammar.py',147),
  ('mod -> NAME LPAREN function RPAREN','mod',4,'p_exp_mod','/Users/rl6sf/src/gql/gqlgrammar.py',151),
  ('mod -> DISTANCE LPAREN NUMBER RPAREN','mod',4,'p_exp_mod','/Users/rl6sf/src/gql/gqlgrammar.py',152),
  ('mod -> CHROM LPAREN function RPAREN','mod',4,'p_exp_mod','/Users/rl6sf/src/gql/gqlgrammar.py',153),
  ('mod -> START LPAREN function RPAREN','mod',4,'p_exp_mod','/Users/rl6sf/src/gql/gqlgrammar.py',154),
  ('mod -> END LPAREN function RPAREN','mod',4,'p_exp_mod','/Users/rl6sf/src/gql/gqlgrammar.py',155),
  ('mod -> STRAND LPAREN function RPAREN','mod',4,'p_exp_mod','/Users/rl6sf/src/gql/gqlgrammar.py',156),
  ('mod -> SCORE LPAREN function RPAREN','mod',4,'p_exp_mod','/Users/rl6sf/src/gql/gqlgrammar.py',157),
  ('function -> MIN','function',1,'p_function','/Users/rl6sf/src/gql/gqlgrammar.py',161),
  ('function -> MAX','function',1,'p_function','/Users/rl6sf/src/gql/gqlgrammar.py',162),
  ('function -> SUM','function',1,'p_function','/Users/rl6sf/src/gql/gqlgrammar.py',163),
  ('function -> COUNT','function',1,'p_function','/Users/rl6sf/src/gql/gqlgrammar.py',164),
  ('function -> MEAN','function',1,'p_function','/Users/rl6sf/src/gql/gqlgrammar.py',165),
  ('function -> MEDIAN','function',1,'p_function','/Users/rl6sf/src/gql/gqlgrammar.py',166),
  ('function -> MODE','function',1,'p_function','/Users/rl6sf/src/gql/gqlgrammar.py',167),
  ('function -> ANTIMODE','function',1,'p_function','/Users/rl6sf/src/gql/gqlgrammar.py',168),
  ('function -> COLLAPSE','function',1,'p_function','/Users/rl6sf/src/gql/gqlgrammar.py',169),
  ('function -> STDEV','function',1,'p_function','/Users/rl6sf/src/gql/gqlgrammar.py',170),
  ('function -> boolexps','function',1,'p_function_bool','/Users/rl6sf/src/gql/gqlgrammar.py',174),
  ('boolexps -> boolexp conj boolexps','boolexps',3,'p_boolexps','/Users/rl6sf/src/gql/gqlgrammar.py',178),
  ('boolexps -> boolexp','boolexps',1,'p_boolexps_one','/Users/rl6sf/src/gql/gqlgrammar.py',182),
  ('boolexp -> compare exp','boolexp',2,'p_boolexp','/Users/rl6sf/src/gql/gqlgrammar.py',186),
  ('compare -> EQUALEQUAL','compare',1,'p_bool_compare','/Users/rl6sf/src/gql/gqlgrammar.py',190),
  ('compare -> LESSTHAN','compare',1,'p_bool_compare','/Users/rl6sf/src/gql/gqlgrammar.py',191),
  ('compare -> GREATERTHAN','compare',1,'p_bool_compare','/Users/rl6sf/src/gql/gqlgrammar.py',192),
  ('compare -> LESSTHANEQUAL','compare',1,'p_bool_compare','/Users/rl6sf/src/gql/gqlgrammar.py',193),
  ('compare -> GREATERTHANEQUAL','compare',1,'p_bool_compare','/Users/rl6sf/src/gql/gqlgrammar.py',194),
  ('compare -> NOTEQUAL','compare',1,'p_bool_compare','/Users/rl6sf/src/gql/gqlgrammar.py',195),
  ('conj -> AND','conj',1,'p_bool_conj','/Users/rl6sf/src/gql/gqlgrammar.py',199),
  ('conj -> OR','conj',1,'p_bool_conj','/Users/rl6sf/src/gql/gqlgrammar.py',200),
  ('idents -> ident COMMA idents','idents',3,'p_idents','/Users/rl6sf/src/gql/gqlgrammar.py',204),
  ('idents -> ident','idents',1,'p_idents_one','/Users/rl6sf/src/gql/gqlgrammar.py',208),
  ('ident -> IDENTIFIER','ident',1,'p_idnent_identifier','/Users/rl6sf/src/gql/gqlgrammar.py',212),
]
