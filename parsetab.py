
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = '\xad\x82\x89\xff\xfa\x028!\xac\x11\xc1\xa2):2\xcb'
    
_lr_action_items = {'COUNT':([12,21,32,82,83,84,85,86,87,95,96,97,98,103,107,108,],[16,16,16,90,90,90,90,90,90,16,-60,-64,-62,-59,-63,-61,]),'LPAREN':([71,73,74,75,76,77,78,],[81,82,83,84,85,86,87,]),'NOTEQUAL':([82,83,84,85,86,87,117,118,119,],[97,97,97,97,97,97,-65,97,-66,]),'MERGEMIN':([12,21,32,95,96,97,98,103,107,108,],[17,17,17,17,-60,-64,-62,-59,-63,-61,]),'MEDIAN':([82,83,84,85,86,87,],[99,99,99,99,99,99,]),'SUM':([82,83,84,85,86,87,],[94,94,94,94,94,94,]),'EQUAL':([6,],[12,]),'LESSTHAN':([82,83,84,85,86,87,117,118,119,],[96,96,96,96,96,96,-65,96,-66,]),'PEAK':([0,2,3,15,33,47,60,],[4,-3,4,-5,-6,-4,-7,]),'PRINT':([0,2,3,15,33,47,60,],[5,-3,5,-5,-6,-4,-7,]),'SUBTRACT':([20,27,],[-69,44,]),'COLLAPSE':([82,83,84,85,86,87,],[106,106,106,106,106,106,]),'RPAREN':([9,20,22,25,34,36,37,41,42,45,46,51,52,53,55,56,57,59,61,62,63,64,65,66,67,68,69,70,72,79,80,89,90,91,92,93,94,99,100,101,102,104,105,106,109,110,111,112,113,114,115,116,120,121,122,123,124,125,126,127,],[-69,-8,-10,-9,-27,-13,-11,-68,-26,-35,-35,-22,-25,-24,-67,-28,-23,-29,-35,-15,-17,-16,-14,-19,-18,-12,-20,-21,-34,-37,-33,116,-48,-57,-45,-52,-47,-50,-55,-51,-54,-49,121,-53,-46,122,123,124,125,126,-36,-39,-58,-38,-40,-41,-44,-42,-43,-56,]),'SEMICOLON':([9,11,14,20,22,25,31,34,36,37,41,42,45,46,48,51,52,53,55,56,57,59,61,62,63,64,65,66,67,68,69,70,72,79,80,115,116,121,122,123,124,125,126,],[-69,15,33,-8,-10,-9,47,-27,-13,-11,-68,-26,-35,-35,60,-22,-25,-24,-67,-28,-23,-29,-35,-15,-17,-16,-14,-19,-18,-12,-20,-21,-34,-37,-33,-36,-39,-38,-40,-41,-44,-42,-43,]),'JACCARD':([9,20,23,27,41,55,],[-69,-69,38,-68,-68,-67,]),'MERGEFLAT':([12,21,32,95,96,97,98,103,107,108,],[18,18,18,18,-60,-64,-62,-59,-63,-61,]),'LESSTHANEQUAL':([82,83,84,85,86,87,117,118,119,],[98,98,98,98,98,98,-65,98,-66,]),'GENOME':([49,50,],[66,66,]),'CAST':([12,21,32,95,96,97,98,103,107,108,],[19,19,19,19,-60,-64,-62,-59,-63,-61,]),'COMMA':([9,20,27,41,79,116,121,122,123,124,125,126,],[-69,-69,43,43,88,-39,-38,-40,-41,-44,-42,-43,]),'BED12':([49,50,],[67,67,]),'STDEV':([82,83,84,85,86,87,],[102,102,102,102,102,102,]),'EQUALEQUAL':([82,83,84,85,86,87,117,118,119,],[103,103,103,103,103,103,-65,103,-66,]),'IDENTIFIER':([0,2,3,4,5,7,12,15,16,17,18,19,21,24,26,28,29,30,32,33,38,39,43,44,47,54,60,95,96,97,98,103,107,108,],[6,-3,6,9,9,9,20,-5,9,-30,-31,9,20,9,9,-32,9,9,20,-6,9,9,9,9,-4,9,-7,20,-60,-64,-62,-59,-63,-61,]),'CHROM':([58,88,],[74,74,]),'$end':([0,1,2,3,8,15,33,47,60,],[-2,0,-3,-2,-1,-5,-6,-4,-7,]),'LOAD':([12,21,32,95,96,97,98,103,107,108,],[21,21,21,21,-60,-64,-62,-59,-63,-61,]),'END':([58,88,],[77,77,]),'STRING':([12,21,32,54,95,96,97,98,103,107,108,],[22,22,22,70,22,-60,-64,-62,-59,-63,-61,]),'ANTIMODE':([82,83,84,85,86,87,],[93,93,93,93,93,93,]),'COMPLEMENT':([12,21,32,95,96,97,98,103,107,108,],[24,24,24,24,-60,-64,-62,-59,-63,-61,]),'MODE':([82,83,84,85,86,87,],[101,101,101,101,101,101,]),'NUMBER':([9,10,12,21,32,81,95,96,97,98,103,107,108,],[-69,14,25,25,25,89,25,-60,-64,-62,-59,-63,-61,]),'BED3':([49,50,],[62,62,]),'START':([58,88,],[75,75,]),'AS':([9,13,20,22,25,34,35,36,37,40,41,42,45,46,51,52,53,55,56,57,59,61,62,63,64,65,66,67,68,69,70,72,79,80,115,116,121,122,123,124,125,126,],[-69,32,-8,-10,-9,-27,49,50,-11,54,-68,-26,-35,-35,-22,-25,-24,-67,-28,-23,-29,-35,-15,-17,-16,-14,-19,-18,-12,-20,-21,-34,-37,-33,-36,-39,-38,-40,-41,-44,-42,-43,]),'SCORE':([58,88,],[76,76,]),'GREATERTHAN':([82,83,84,85,86,87,117,118,119,],[108,108,108,108,108,108,-65,108,-66,]),'BED6':([49,50,],[63,63,]),'INTERSECT':([9,12,20,21,23,27,32,41,55,95,96,97,98,103,107,108,],[-69,26,-69,26,39,-68,26,-68,-67,26,-60,-64,-62,-59,-63,-61,]),'BED4':([49,50,],[64,64,]),'GREATERTHANEQUAL':([82,83,84,85,86,87,117,118,119,],[107,107,107,107,107,107,-65,107,-66,]),'WHERE':([9,41,45,46,55,61,62,63,64,65,66,67,],[-69,-68,58,58,-67,58,-15,-17,-16,-14,-19,-18,]),'STRAND':([58,88,],[78,78,]),'AND':([9,20,22,25,34,36,37,41,42,45,46,51,52,53,55,56,57,59,61,62,63,64,65,66,67,68,69,70,72,79,80,91,115,116,120,121,122,123,124,125,126,],[-69,-8,-10,-9,-27,-13,-11,-68,-26,-35,-35,-22,-25,-24,-67,-28,-23,-29,-35,-15,-17,-16,-14,-19,-18,-12,-20,-21,-34,-37,-33,117,-36,-39,-58,-38,-40,-41,-44,-42,-43,]),'DISTANCE':([58,88,],[71,71,]),'NAME':([58,88,],[73,73,]),'MERGEMAX':([12,21,32,95,96,97,98,103,107,108,],[28,28,28,28,-60,-64,-62,-59,-63,-61,]),'MIN':([82,83,84,85,86,87,],[92,92,92,92,92,92,]),'MAX':([82,83,84,85,86,87,],[109,109,109,109,109,109,]),'FILTER':([12,21,32,95,96,97,98,103,107,108,],[29,29,29,29,-60,-64,-62,-59,-63,-61,]),'MEAN':([82,83,84,85,86,87,],[104,104,104,104,104,104,]),'SAVE':([0,2,3,15,33,47,60,],[7,-3,7,-5,-6,-4,-7,]),'OR':([9,20,22,25,34,36,37,41,42,45,46,51,52,53,55,56,57,59,61,62,63,64,65,66,67,68,69,70,72,79,80,91,115,116,120,121,122,123,124,125,126,],[-69,-8,-10,-9,-27,-13,-11,-68,-26,-35,-35,-22,-25,-24,-67,-28,-23,-29,-35,-15,-17,-16,-14,-19,-18,-12,-20,-21,-34,-37,-33,119,-36,-39,-58,-38,-40,-41,-44,-42,-43,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'function':([82,83,84,85,86,87,],[105,110,111,112,113,114,]),'boolexp':([82,83,84,85,86,87,118,],[91,91,91,91,91,91,91,]),'ident':([4,5,7,12,16,19,21,24,26,29,30,32,38,39,43,44,54,95,],[10,11,13,27,34,35,27,40,41,41,41,27,41,41,41,41,69,27,]),'file':([21,32,],[36,48,]),'idents':([12,21,26,29,30,32,38,39,43,44,95,],[23,23,42,45,46,23,52,53,55,56,23,]),'sstmt':([0,3,],[2,2,]),'filetype':([49,50,],[61,68,]),'optfiletype':([36,],[51,]),'mods':([58,88,],[72,115,]),'element':([0,3,],[3,3,]),'merge':([12,21,32,95,],[30,30,30,30,]),'gql':([0,3,],[1,8,]),'boolexps':([82,83,84,85,86,87,118,],[100,100,100,100,100,100,127,]),'exp':([12,21,32,95,],[31,37,37,120,]),'compare':([82,83,84,85,86,87,118,],[95,95,95,95,95,95,95,]),'conj':([91,],[118,]),'mod':([58,88,],[79,79,]),'filetypes':([49,50,],[65,65,]),'optmods':([45,46,61,],[57,59,80,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> gql","S'",1,None,None,None),
  ('gql -> element gql','gql',2,'p_gql','/Users/rl6sf/src/gql/gqlgrammar.py',14),
  ('gql -> <empty>','gql',0,'p_gql_empty','/Users/rl6sf/src/gql/gqlgrammar.py',18),
  ('element -> sstmt','element',1,'p_element_stmt','/Users/rl6sf/src/gql/gqlgrammar.py',22),
  ('sstmt -> IDENTIFIER EQUAL exp SEMICOLON','sstmt',4,'p_sstmt_assignment','/Users/rl6sf/src/gql/gqlgrammar.py',35),
  ('sstmt -> PRINT ident SEMICOLON','sstmt',3,'p_sstmt_print','/Users/rl6sf/src/gql/gqlgrammar.py',40),
  ('sstmt -> PEAK ident NUMBER SEMICOLON','sstmt',4,'p_sstmt_peak','/Users/rl6sf/src/gql/gqlgrammar.py',44),
  ('sstmt -> SAVE ident AS file SEMICOLON','sstmt',5,'p_sstmt_save','/Users/rl6sf/src/gql/gqlgrammar.py',48),
  ('exp -> IDENTIFIER','exp',1,'p_exp_identifier','/Users/rl6sf/src/gql/gqlgrammar.py',56),
  ('exp -> NUMBER','exp',1,'p_exp_number','/Users/rl6sf/src/gql/gqlgrammar.py',60),
  ('exp -> STRING','exp',1,'p_exp_string','/Users/rl6sf/src/gql/gqlgrammar.py',64),
  ('file -> exp','file',1,'p_file','/Users/rl6sf/src/gql/gqlgrammar.py',68),
  ('optfiletype -> AS filetype','optfiletype',2,'p_optfiletype','/Users/rl6sf/src/gql/gqlgrammar.py',72),
  ('optfiletype -> <empty>','optfiletype',0,'p_optfiletype_empty','/Users/rl6sf/src/gql/gqlgrammar.py',76),
  ('filetype -> filetypes','filetype',1,'p_filetype','/Users/rl6sf/src/gql/gqlgrammar.py',80),
  ('filetypes -> BED3','filetypes',1,'p_filetypes','/Users/rl6sf/src/gql/gqlgrammar.py',84),
  ('filetypes -> BED4','filetypes',1,'p_filetypes','/Users/rl6sf/src/gql/gqlgrammar.py',85),
  ('filetypes -> BED6','filetypes',1,'p_filetypes','/Users/rl6sf/src/gql/gqlgrammar.py',86),
  ('filetypes -> BED12','filetypes',1,'p_filetypes','/Users/rl6sf/src/gql/gqlgrammar.py',87),
  ('filetypes -> GENOME','filetypes',1,'p_filetypes','/Users/rl6sf/src/gql/gqlgrammar.py',88),
  ('exp -> COMPLEMENT ident AS ident','exp',4,'p_exp_complement_g','/Users/rl6sf/src/gql/gqlgrammar.py',92),
  ('exp -> COMPLEMENT ident AS STRING','exp',4,'p_exp_complement_genome','/Users/rl6sf/src/gql/gqlgrammar.py',96),
  ('exp -> LOAD file optfiletype','exp',3,'p_exp_load','/Users/rl6sf/src/gql/gqlgrammar.py',100),
  ('exp -> FILTER idents optmods','exp',3,'p_exp_foreach','/Users/rl6sf/src/gql/gqlgrammar.py',104),
  ('exp -> idents INTERSECT idents','exp',3,'p_exp_binary_intersect','/Users/rl6sf/src/gql/gqlgrammar.py',108),
  ('exp -> idents JACCARD idents','exp',3,'p_exp_binary_jaccard','/Users/rl6sf/src/gql/gqlgrammar.py',112),
  ('exp -> INTERSECT idents','exp',2,'p_exp_unary_intersect','/Users/rl6sf/src/gql/gqlgrammar.py',116),
  ('exp -> COUNT ident','exp',2,'p_exp_count','/Users/rl6sf/src/gql/gqlgrammar.py',120),
  ('exp -> ident SUBTRACT idents','exp',3,'p_exp_subtract','/Users/rl6sf/src/gql/gqlgrammar.py',124),
  ('exp -> merge idents optmods','exp',3,'p_exp_merges','/Users/rl6sf/src/gql/gqlgrammar.py',128),
  ('merge -> MERGEMIN','merge',1,'p_exp_merge','/Users/rl6sf/src/gql/gqlgrammar.py',132),
  ('merge -> MERGEFLAT','merge',1,'p_exp_merge','/Users/rl6sf/src/gql/gqlgrammar.py',133),
  ('merge -> MERGEMAX','merge',1,'p_exp_merge','/Users/rl6sf/src/gql/gqlgrammar.py',134),
  ('exp -> CAST ident AS filetype optmods','exp',5,'p_exp_CAST','/Users/rl6sf/src/gql/gqlgrammar.py',138),
  ('optmods -> WHERE mods','optmods',2,'p_exp_optmods','/Users/rl6sf/src/gql/gqlgrammar.py',142),
  ('optmods -> <empty>','optmods',0,'p_exp_optmods_empty','/Users/rl6sf/src/gql/gqlgrammar.py',146),
  ('mods -> mod COMMA mods','mods',3,'p_exp_mods','/Users/rl6sf/src/gql/gqlgrammar.py',150),
  ('mods -> mod','mods',1,'p_exp_mods_one','/Users/rl6sf/src/gql/gqlgrammar.py',154),
  ('mod -> NAME LPAREN function RPAREN','mod',4,'p_exp_mod','/Users/rl6sf/src/gql/gqlgrammar.py',158),
  ('mod -> DISTANCE LPAREN NUMBER RPAREN','mod',4,'p_exp_mod','/Users/rl6sf/src/gql/gqlgrammar.py',159),
  ('mod -> CHROM LPAREN function RPAREN','mod',4,'p_exp_mod','/Users/rl6sf/src/gql/gqlgrammar.py',160),
  ('mod -> START LPAREN function RPAREN','mod',4,'p_exp_mod','/Users/rl6sf/src/gql/gqlgrammar.py',161),
  ('mod -> END LPAREN function RPAREN','mod',4,'p_exp_mod','/Users/rl6sf/src/gql/gqlgrammar.py',162),
  ('mod -> STRAND LPAREN function RPAREN','mod',4,'p_exp_mod','/Users/rl6sf/src/gql/gqlgrammar.py',163),
  ('mod -> SCORE LPAREN function RPAREN','mod',4,'p_exp_mod','/Users/rl6sf/src/gql/gqlgrammar.py',164),
  ('function -> MIN','function',1,'p_function','/Users/rl6sf/src/gql/gqlgrammar.py',168),
  ('function -> MAX','function',1,'p_function','/Users/rl6sf/src/gql/gqlgrammar.py',169),
  ('function -> SUM','function',1,'p_function','/Users/rl6sf/src/gql/gqlgrammar.py',170),
  ('function -> COUNT','function',1,'p_function','/Users/rl6sf/src/gql/gqlgrammar.py',171),
  ('function -> MEAN','function',1,'p_function','/Users/rl6sf/src/gql/gqlgrammar.py',172),
  ('function -> MEDIAN','function',1,'p_function','/Users/rl6sf/src/gql/gqlgrammar.py',173),
  ('function -> MODE','function',1,'p_function','/Users/rl6sf/src/gql/gqlgrammar.py',174),
  ('function -> ANTIMODE','function',1,'p_function','/Users/rl6sf/src/gql/gqlgrammar.py',175),
  ('function -> COLLAPSE','function',1,'p_function','/Users/rl6sf/src/gql/gqlgrammar.py',176),
  ('function -> STDEV','function',1,'p_function','/Users/rl6sf/src/gql/gqlgrammar.py',177),
  ('function -> boolexps','function',1,'p_function_bool','/Users/rl6sf/src/gql/gqlgrammar.py',181),
  ('boolexps -> boolexp conj boolexps','boolexps',3,'p_boolexps','/Users/rl6sf/src/gql/gqlgrammar.py',185),
  ('boolexps -> boolexp','boolexps',1,'p_boolexps_one','/Users/rl6sf/src/gql/gqlgrammar.py',189),
  ('boolexp -> compare exp','boolexp',2,'p_boolexp','/Users/rl6sf/src/gql/gqlgrammar.py',193),
  ('compare -> EQUALEQUAL','compare',1,'p_bool_compare','/Users/rl6sf/src/gql/gqlgrammar.py',197),
  ('compare -> LESSTHAN','compare',1,'p_bool_compare','/Users/rl6sf/src/gql/gqlgrammar.py',198),
  ('compare -> GREATERTHAN','compare',1,'p_bool_compare','/Users/rl6sf/src/gql/gqlgrammar.py',199),
  ('compare -> LESSTHANEQUAL','compare',1,'p_bool_compare','/Users/rl6sf/src/gql/gqlgrammar.py',200),
  ('compare -> GREATERTHANEQUAL','compare',1,'p_bool_compare','/Users/rl6sf/src/gql/gqlgrammar.py',201),
  ('compare -> NOTEQUAL','compare',1,'p_bool_compare','/Users/rl6sf/src/gql/gqlgrammar.py',202),
  ('conj -> AND','conj',1,'p_bool_conj','/Users/rl6sf/src/gql/gqlgrammar.py',206),
  ('conj -> OR','conj',1,'p_bool_conj','/Users/rl6sf/src/gql/gqlgrammar.py',207),
  ('idents -> ident COMMA idents','idents',3,'p_idents','/Users/rl6sf/src/gql/gqlgrammar.py',211),
  ('idents -> ident','idents',1,'p_idents_one','/Users/rl6sf/src/gql/gqlgrammar.py',215),
  ('ident -> IDENTIFIER','ident',1,'p_idnent_identifier','/Users/rl6sf/src/gql/gqlgrammar.py',219),
]
